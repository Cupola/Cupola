==== BYPASS ====

p1.bypass
p1.audioInput( "in" ) --> p1.audioOutput( "out" )
a) out hat bereits bus : numChannels beibehalten (wrapExtend inputs)
b) out bekommt numChannels von in

it could be implemented this way:

if( !bypassRef().swap( true )) {
	if( isPlaying ) { stop; play }
}

where play diverges and creates a different runningRef
; nachteil : synths we diskin werden nicht pausiert, d.h.
müssen neu gecue'ed werden etc.

; die art des bypass könnte später explizit definiert werden
(ähnlich wie die idee, die user-fades zu ermöglichen)

// statt bypass ref könnte der play-state ein tri-state sein (Stopped / Playing / Bypassed)
?

// in general: we ought to remove the "feature" than default-in gets automatically connected to physical in (mostly we won't want this + creates feedback danger)

----------------------
~/>

bus A
--> alloc bus B
in.bus(isolated) = bus B
xfade synths von A --> B (reader A / writer B)

//// 12-jul-10
wenn physical wiederhergestellt werden soll:
- es geht niemals, daß n_set nach fade ausgeführt wird, d.h.
für synth A muß sofort der output auf 0 gesetzt werden.
damit ergibt sich für die sterbenden synth B die notwendigkeit,
das ungemischte signal von A zu erhalten. folglich:

pre A : read physical --> write tmp
A : write physical
post A : 
	x = read tmp
	y = read physical
	unmixed A = y - x  // hat natürlich etwas floating point noise, sollte aber egal sein
	ReplaceOut( physical, XFade( x -> y ))
	Out( tmp2, unmixed )

B : read tmp2
