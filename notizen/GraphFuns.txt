sealed abstract class GraphFun
class OutputFun( f: () => GE ) extends GraphFun
class NoOutputFun( f: () => Unit ) extends GraphFun
class InOutputFun( f: GE => GE ) extends GraphFun
class InNoOutputFun( f: GE => Unit ) extends GraphFun

implicit def graphFun1( thunk: => GE ) = new OutputFun( () => thunk )
implicit def graphFun2( thunk: => Unit ) = new NoOutputFun( () => thunk )
implicit def graphFun3( fun: GE => GE ) = new InOutputFun( fun )
implicit def graphFun4( fun: GE => Unit ) = new InNoOutputFun( fun )

def graph( g: GraphFun ) { g match {
    case _: OutputFun => println( "output" )
    case _: NoOutputFun => println( "no output" )
    case _: InOutputFun => println( "in-output" )
    case _: InNoOutputFun => println( "in-no output" )
}}

graph { SinOsc.ar }
graph { Out.ar( 0, SinOsc.ar ); () }
graph { in: GE => SinOsc.ar( in )}	// stupid - we need to specify in's type
graph { in: GE => Out.ar( 0, SinOsc.ar ); () }

///////////// better

import scala.reflect.ClassManifest

def graph[ R ]( thunk: => R )( implicit m: ClassManifest[ R ]) {
    if( m <:< ClassManifest.fromClass( classOf[ GE ])) {
        println( "IS GE" )
    } else {
        println( "NOT GE" )
    }
}

graph { SinOsc.ar }
graph { SinOsc.ar; () }

//////

proc
filter
output

nproc
nfilter
noutput
?

